@page "/"
@using BlazorApp2.Client.Logic
<PageTitle>Index</PageTitle>
<AuthorizeView>
    <Authorized>
        <a href="">@context.User.Identity?.Name!</a>
        <button type="button" class="nav-link btn btn-link" @onclick="LogoutHandler">Log out</button>
    </Authorized>
    <NotAuthorized>
        <a href="/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>
<div class="col-md-9 m-auto">
    <AuthorizeView Roles="Admin">
        <div class="col-md-6 m-auto">
            <div class="mb-3">
                <label class="form-label">Id is @_currentUser.Id</label>
                <input type="number" class="form-control"
                       @bind="@_currentUser.Id" @oninput="@(e => _currentUser.Id = int.Parse(e.Value?.ToString()!))"/>
            </div>
            <div class="mb-3">
                <label class="form-label">FirstName</label>
                <input type="text" class="form-control"
                       @bind="@_currentUser.FirstName" @oninput="@(e => _currentUser.FirstName = e.Value?.ToString())"/>
            </div>
            <div class="mb-3">
                <label class="form-label">LastName</label>
                <input type="text" class="form-control"
                       @bind="@_currentUser.LastName" @oninput="@(e => _currentUser.LastName = e.Value?.ToString())"/>
            </div>
            <div class="mb-3">
                <label class="form-label">Info</label>
                <textarea class="form-control"
                   @bind="@_currentUser.Info" @oninput="@(e => _currentUser.Info = e.Value?.ToString())"></textarea>
            </div>
            <div class="mb-3">
                <label class="form-label">DepartmentId</label>
                <input type="number" class="form-control"
                       @bind="@_currentUser.DepartmentId" @oninput="@(e => _currentUser.DepartmentId = int.Parse(e.Value?.ToString()!))"/>
            </div>
            <div class="d-grid gap-2">
                <button class="btn btn-primary" @onclick="AddUser">Add user</button>
            </div>
            <div class="d-grid gap-2">
                <button class="btn btn-primary" @onclick="EditUser">Edit user</button>
            </div>
            <div class="d-grid gap-2">
                <button class="btn btn-primary" @onclick="AddInfo">Add text to info</button>
            </div>
        </div>
    </AuthorizeView>
    <div class="table-responsive">
        <table class="table">
            <thead>
            <tr>
                <th scope="col">@IndexTableHeaders[0]</th>
                <th scope="col">@IndexTableHeaders[1]</th>
                <th scope="col">@IndexTableHeaders[2]</th>
                <th scope="col">@IndexTableHeaders[3]</th>
                <th scope="col">@IndexTableHeaders[4]</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var user in _users ?? Enumerable.Empty<User>())
            {
                <tr @onclick="() => SelectUser(user)">
                    <td>@user.Id</td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Info</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => DeleteUser(user.Id)">Delete User</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

@code
{
    List<User> _users;
    User _currentUser = new();

    protected override async Task OnInitializedAsync() => _users = await GetUsers();

    private async Task<List<User>> GetUsers() => await Http.GetFromJsonAsync<List<User>>("users");

    async Task AddUser()
    {
        await Http.PutAsJsonAsync("createuser", _currentUser);
        _users = await GetUsers();
    }

    async Task EditUser()
    {
        await Http.PatchAsJsonAsync("updateuser", _currentUser);
        _users = await GetUsers();
    }

    void SelectUser(User user) => _currentUser = user;

    async Task DeleteUser(int id)
    {
        await Http.DeleteAsync($"deleteuser?id={id}");
        _users = await GetUsers();
    }

    void AddInfo() => _currentUser.Info += "button clicked!";

    async Task LogoutHandler()
    {
        var status = await Http.GetAsync("logout");
        if (status.IsSuccessStatusCode)
        {
            (_authStateProvider as CustomAuthStateProvider).RemoveAuth();
            await Js.RemoveItemAsync("isauthenticated");
            Nav.NavigateTo("/");
        }
    }
}